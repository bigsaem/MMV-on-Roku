<?xml version="1.0" encoding="utf-8" ?>
<component name="ContinueWatching" extends="Task">
  <interface>
    
  </interface>
  
  <script type="text/brightscript">
    
  <![CDATA[
  sub init()
  	m.top.functionName = "updateList"
  end sub
  
  'This function updates the continue watching row dynamically.
  'It is on a new thread that retrieves data from the registry to populate the Continue Watching row
  function updateList()
	'Get current active scene
    myScene = m.top.GetScene()
    APIURL = "http://vstage-api.mini-me.co/collections?product=https%3A%2F%2Fapi.vhx.tv%2Fproducts%2F37342&type=seriesXXX"
    oneRow = GetContinueWatchingArray()
    
    if myScene.APIArray = invalid
   		twoRow = GetApiArray(APIURL)
   	else
   		twoRow = myScene.APIArray
   	end if
   	
   	size = 0    
    for each item in oneRow
        size = size + 1
    end for
    	
    list = []
        
    if twoRow = invalid
        screen = CreateObject("roSGScreen")
        scene = screen.CreateScene("ErrorScene")
        port = CreateObject("roMessagePort")
        screen.SetMessagePort(port)
        screen.Show()
        
    else
        series = "Series"
        continue = "Continue watching..."
        if size <> 0
            list = [
                {
                    TITLE: continue
                    ContentList: oneRow
                }
                {
                    TITLE: series
                    ContentList: twoRow
                }
            ]
            myScene.rowCount = 2
        else
            list = [
                {
                TITLE: series
                ContentList: twoRow
                }
            ]
            myScene.rowCount = 1
            
        end if
        
        myScene.gridContent = parseJSONObject(list)
        

        canGetApi = false
    end if
    
    
end function

function parseJSONObject(list as Object)
    RowItems = CreateObject("RoSGNode", "ContentNode")

    for each rowAA in list
        row = CreateObject("RoSGNode", "ContentNode")
        row.Title = rowAA.Title

        for each itemAA in rowAA.ContentList
            item = CreateObject("RoSGNode", "ContentNode")
            for each key in itemAA
                item[key] = itemAA[key]
            end for
            row.appendChild(item)
        end for
        RowItems.appendChild(row)
    end for

    return RowItems
end function

function GetApiArray(APIURL)

    request = CreateObject("roUrlTransfer")
    request.setRequest("GET")
    request.SetUrl(APIURL)
    request.AddHeader("auth", "KPBR41wti28eGnLvVuQikPnPOVpv2TCk")
    jsonString = request.GetToString()
    result = []
    
    if jsonString = ""
        return invalid
    end if

    jsonParsed = ParseJson(jsonString)

    if jsonParsed = invalid
        return invalid
    end if

    for each show in jsonParsed._embedded.collections
        item = {}
        item.HDPosterUrl = show.thumbnail.medium
        item.Title = show.name
        item.seasonUrl = show._links.seasons.href
        item.seasonNumber = show.seasons_count.ToStr()
        result.push(item)
    end for
    	
    return result
end function

function GetContinueWatchingArray()
    result = []
    
    sec = createObject("roRegistrySection", "MySection")
    list = sec.GetKeyList()
    for each item in list
        jsonString = sec.Read(item)
        jsonObject = parseJson(jsonString)
        tempItem = {}
        tempItem.streamFormat = jsonObject.streamFormat
        tempItem.url = jsonObject.url
        tempItem.id = item
        tempItem.HDPosterUrl = jsonObject.thumbnail
        tempItem.description = jsonObject.description
       	tempItem.Title = jsonObject.name
        result.push(tempItem)
    end for
            
    return result
  
end function
  
  
 
  ]]> 
  </script>
</component>
